{"version":3,"file":"scripts.020f0243e92ab8560ae7.js","mappings":"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","sources":["webpack://rss-virtual-keyboard/./src/index.js"],"sourcesContent":["import './styles/index.scss';\r\n\r\nconst Keyboard = {\r\n  elements: {\r\n    main: null,\r\n    keysContainer: null,\r\n    keys: [],\r\n  },\r\n\r\n  eventHandlers: {\r\n    oninput: null,\r\n    onclose: null,\r\n  },\r\n\r\n  properties: {\r\n    value: '',\r\n    capsLock: false,\r\n  },\r\n\r\n  init() {\r\n    // Create main elements\r\n    this.elements.main = document.createElement('div');\r\n    this.elements.keysContainer = document.createElement('div');\r\n\r\n    // Setup main elements\r\n    this.elements.main.classList.add('keyboard');\r\n    this.elements.keysContainer.classList.add('keyboard__keys');\r\n    this.elements.keysContainer.appendChild(this._createKeys());\r\n\r\n    this.elements.keys = this.elements.keysContainer.querySelectorAll('.keyboard__key');\r\n\r\n    // Add to DOM\r\n    this.elements.main.appendChild(this.elements.keysContainer);\r\n    document.body.appendChild(this.elements.main);\r\n\r\n    // Automatically use keyboard for elements with .use-keyboard-input\r\n    document.querySelectorAll('.use-keyboard-input').forEach((element) => {\r\n      element.addEventListener('focus', () => {\r\n        this.open(element.value, (currentValue) => {\r\n          element.value = currentValue;\r\n        });\r\n      });\r\n    });\r\n  },\r\n\r\n  _createKeys() {\r\n    const fragment = document.createDocumentFragment();\r\n    const keyLayout = [\r\n      '`',\r\n      '1',\r\n      '2',\r\n      '3',\r\n      '4',\r\n      '5',\r\n      '6',\r\n      '7',\r\n      '8',\r\n      '9',\r\n      '0',\r\n      '-',\r\n      '+',\r\n      'backspace',\r\n      'tab',\r\n      'q',\r\n      'w',\r\n      'e',\r\n      'r',\r\n      't',\r\n      'y',\r\n      'u',\r\n      'i',\r\n      'o',\r\n      'p',\r\n      '[',\r\n      ']',\r\n      'del',\r\n      'caps',\r\n      'a',\r\n      's',\r\n      'd',\r\n      'f',\r\n      'g',\r\n      'h',\r\n      'j',\r\n      'k',\r\n      'l',\r\n      ';',\r\n      '\\'',\r\n      '\\\\',\r\n      'enter',\r\n      'shift',\r\n      '/',\r\n      'z',\r\n      'x',\r\n      'c',\r\n      'v',\r\n      'b',\r\n      'n',\r\n      'm',\r\n      ',',\r\n      '.',\r\n      '?',\r\n      'up',\r\n      'shiftR',\r\n      'ctrl',\r\n      'win',\r\n      'alt',\r\n      'space',\r\n      'alt',\r\n      'ctrl',\r\n      'left',\r\n      'down',\r\n      'right',\r\n    ];\r\n\r\n    // Creates HTML for an icon\r\n    // const createIconHTML = (icon_name) => { `<i class='material-icons'>${icon_name}</i>`; };\r\n\r\n    keyLayout.forEach((key) => {\r\n      const keyElement = document.createElement('button');\r\n      const insertLineBreak = ['backspace', 'del', 'enter', 'shiftR'].indexOf(key) !== -1;\r\n\r\n      // Add attributes/classes\r\n      keyElement.setAttribute('type', 'button');\r\n      keyElement.classList.add('keyboard__key');\r\n\r\n      switch (key) {\r\n        case 'backspace':\r\n          keyElement.classList.add('keyboard__key--wide');\r\n          keyElement.innerHTML = 'backspace';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value = this.properties.value.substring(\r\n              0,\r\n              this.properties.value.length - 1,\r\n            );\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n        case 'ctrl':\r\n          keyElement.classList.add('keyboard__key--wide');\r\n          keyElement.innerHTML = 'ctrl';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value = this.properties.value.substring(\r\n              0,\r\n              this.properties.value.length - 1,\r\n            );\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n        case 'shift':\r\n          keyElement.classList.add('keyboard__key--wide');\r\n          keyElement.innerHTML = 'shift';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value = this.properties.value.substring(\r\n              0,\r\n              this.properties.value.length - 1,\r\n            );\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n        case 'win':\r\n          keyElement.classList.add('keyboard__key--wide');\r\n          keyElement.innerHTML = 'win';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value = this.properties.value.substring(\r\n              0,\r\n              this.properties.value.length - 1,\r\n            );\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n        case 'alt':\r\n          keyElement.classList.add('keyboard__key--wide');\r\n          keyElement.innerHTML = 'alt';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value = this.properties.value.substring(\r\n              0,\r\n              this.properties.value.length - 1,\r\n            );\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n        case 'caps':\r\n          keyElement.classList.add(\r\n            'keyboard__key--wide',\r\n            'keyboard__key--activatable',\r\n          );\r\n          keyElement.innerHTML = 'capslock';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this._toggleCapsLock();\r\n            keyElement.classList.toggle(\r\n              'keyboard__key--active',\r\n              this.properties.capsLock,\r\n            );\r\n          });\r\n\r\n          break;\r\n\r\n        case 'tab':\r\n          keyElement.classList.add(\r\n            'keyboard__key--wide',\r\n          );\r\n          keyElement.innerHTML = 'tab';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this._toggleCapsLock();\r\n            keyElement.classList.toggle(\r\n              'keyboard__key--active',\r\n              this.properties.capsLock,\r\n            );\r\n          });\r\n\r\n          break;\r\n\r\n        case 'enter':\r\n          keyElement.classList.add('keyboard__key');\r\n          keyElement.innerHTML = 'enter';\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value += '\\n';\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n        case 'space':\r\n          keyElement.classList.add('keyboard__key--extra-wide');\r\n          // keyElement.innerHTML = createIconHTML('space_bar');\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value += ' ';\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n\r\n          // case 'done':\r\n          //   keyElement.classList.add(\r\n          //     'keyboard__key--wide',\r\n          //     'keyboard__key--dark',\r\n          //   );\r\n          //   // keyElement.innerHTML = createIconHTML('check_circle');\r\n\r\n          //   keyElement.addEventListener('click', () => {\r\n          //     this.close();\r\n          //     this._triggerEvent('onclose');\r\n          //   });\r\n\r\n          // break;\r\n\r\n        default:\r\n          keyElement.textContent = key.toLowerCase();\r\n\r\n          keyElement.addEventListener('click', () => {\r\n            this.properties.value += this.properties.capsLock\r\n              ? key.toUpperCase()\r\n              : key.toLowerCase();\r\n            this._triggerEvent('oninput');\r\n          });\r\n\r\n          break;\r\n      }\r\n\r\n      fragment.appendChild(keyElement);\r\n\r\n      if (insertLineBreak) {\r\n        fragment.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n\r\n    return fragment;\r\n  },\r\n\r\n  _triggerEvent(handlerName) {\r\n    if (typeof this.eventHandlers[handlerName] === 'function') {\r\n      this.eventHandlers[handlerName](this.properties.value);\r\n    }\r\n  },\r\n\r\n  _toggleCapsLock() {\r\n    this.properties.capsLock = !this.properties.capsLock;\r\n\r\n    /* eslint-disable-next-line */\r\n    for (const key of this.elements.keys) {\r\n      if (key.childElementCount === 0) {\r\n        key.textContent = this.properties.capsLock\r\n          ? key.textContent.toUpperCase()\r\n          : key.textContent.toLowerCase();\r\n      }\r\n    }\r\n  },\r\n\r\n  open(initialValue, oninput, onclose) {\r\n    this.properties.value = initialValue || '';\r\n    this.eventHandlers.oninput = oninput;\r\n    this.eventHandlers.onclose = onclose;\r\n  },\r\n\r\n  close() {\r\n    this.properties.value = '';\r\n    this.eventHandlers.oninput = oninput;\r\n    this.eventHandlers.onclose = onclose;\r\n  },\r\n};\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => { Keyboard.init(); });\r\n"],"names":["Keyboard","elements","main","keysContainer","keys","eventHandlers","oninput","onclose","properties","value","capsLock","init","this","document","createElement","classList","add","appendChild","_createKeys","querySelectorAll","body","forEach","element","addEventListener","open","currentValue","fragment","createDocumentFragment","key","keyElement","insertLineBreak","indexOf","setAttribute","innerHTML","substring","length","_triggerEvent","_toggleCapsLock","toggle","textContent","toLowerCase","toUpperCase","handlerName","childElementCount","initialValue","close","window"],"sourceRoot":""}